<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Stethoscope.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Stethoscope.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Oct 26 11:02:17 2020
<BR><P>
<H3>Maximum Stack Usage =        936 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Wav_Player_Task &rArr; audio_play &rArr; wav_play_song &rArr; wav_decode_init &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">NMI_Handler</a><BR>
 <LI><a href="#[27]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">MemManage_Handler</a><BR>
 <LI><a href="#[28]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">BusFault_Handler</a><BR>
 <LI><a href="#[29]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">UsageFault_Handler</a><BR>
 <LI><a href="#[2a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">SVC_Handler</a><BR>
 <LI><a href="#[2b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">DebugMon_Handler</a><BR>
 <LI><a href="#[40]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">ADC_IRQHandler</a><BR>
 <LI><a href="#[95]">rt_thread_idle_entry</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[95]">rt_thread_idle_entry</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[40]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">BusFault_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6e]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6f]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[70]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6d]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7c]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[87]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[67]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[68]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[69]">DMA2_Stream3_IRQHandler</a> from sai.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[72]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[73]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[74]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2b]">DebugMon_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6b]">ETH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6c]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">EXTI0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7e]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7d]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[77]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[76]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[86]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[85]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">MemManage_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8e]">NFC_Transfer_Task</a> from task.o(i.NFC_Transfer_Task) referenced from task.o(i.Task_init)
 <LI><a href="#[25]">NMI_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8d]">OLED_Display_Task</a> from task.o(i.OLED_Display_Task) referenced from task.o(i.Task_init)
 <LI><a href="#[71]">OTG_FS_IRQHandler</a> from usbd_usr.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[79]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[78]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7b]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7a]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2f]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[84]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[81]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[82]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[83]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[17]">STORAGE_GetCapacity</a> from usbd_storage_msd.o(i.STORAGE_GetCapacity) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[1c]">STORAGE_GetMaxLun</a> from usbd_storage_msd.o(i.STORAGE_GetMaxLun) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[16]">STORAGE_Init</a> from usbd_storage_msd.o(i.STORAGE_Init) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[18]">STORAGE_IsReady</a> from usbd_storage_msd.o(i.STORAGE_IsReady) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[19]">STORAGE_IsWriteProtected</a> from usbd_storage_msd.o(i.STORAGE_IsWriteProtected) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[1a]">STORAGE_Read</a> from usbd_storage_msd.o(i.STORAGE_Read) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[1b]">STORAGE_Write</a> from usbd_storage_msd.o(i.STORAGE_Write) referenced 2 times from usbd_storage_msd.o(.data)
 <LI><a href="#[2a]">SVC_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[89]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[30]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[64]">TIM6_DAC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[62]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7f]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[80]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[75]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1]">USBD_DataInStage</a> from usbd_core.o(i.USBD_DataInStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[0]">USBD_DataOutStage</a> from usbd_core.o(i.USBD_DataOutStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[7]">USBD_IsoINIncomplete</a> from usbd_core.o(i.USBD_IsoINIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[8]">USBD_IsoOUTIncomplete</a> from usbd_core.o(i.USBD_IsoOUTIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[c]">USBD_MSC_DataIn</a> from usbd_msc_core.o(i.USBD_MSC_DataIn) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[d]">USBD_MSC_DataOut</a> from usbd_msc_core.o(i.USBD_MSC_DataOut) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[a]">USBD_MSC_DeInit</a> from usbd_msc_core.o(i.USBD_MSC_DeInit) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[e]">USBD_MSC_GetCfgDesc</a> from usbd_msc_core.o(i.USBD_MSC_GetCfgDesc) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[9]">USBD_MSC_Init</a> from usbd_msc_core.o(i.USBD_MSC_Init) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[b]">USBD_MSC_Setup</a> from usbd_msc_core.o(i.USBD_MSC_Setup) referenced 2 times from usbd_msc_core.o(.data)
 <LI><a href="#[4]">USBD_Reset</a> from usbd_core.o(i.USBD_Reset) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[6]">USBD_Resume</a> from usbd_core.o(i.USBD_Resume) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[3]">USBD_SOF</a> from usbd_core.o(i.USBD_SOF) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[2]">USBD_SetupStage</a> from usbd_core.o(i.USBD_SetupStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[5]">USBD_Suspend</a> from usbd_core.o(i.USBD_Suspend) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[14]">USBD_USR_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[1f]">USBD_USR_DeviceConfigured</a> from usbd_usr.o(i.USBD_USR_DeviceConfigured) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[22]">USBD_USR_DeviceConnected</a> from usbd_usr.o(i.USBD_USR_DeviceConnected) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[f]">USBD_USR_DeviceDescriptor</a> from usbd_desc.o(i.USBD_USR_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[23]">USBD_USR_DeviceDisconnected</a> from usbd_usr.o(i.USBD_USR_DeviceDisconnected) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[1e]">USBD_USR_DeviceReset</a> from usbd_usr.o(i.USBD_USR_DeviceReset) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[21]">USBD_USR_DeviceResumed</a> from usbd_usr.o(i.USBD_USR_DeviceResumed) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[20]">USBD_USR_DeviceSuspended</a> from usbd_usr.o(i.USBD_USR_DeviceSuspended) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[1d]">USBD_USR_Init</a> from usbd_usr.o(i.USBD_USR_Init) referenced 2 times from usbd_usr.o(.data)
 <LI><a href="#[15]">USBD_USR_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[10]">USBD_USR_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_USR_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[11]">USBD_USR_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[12]">USBD_USR_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_USR_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[13]">USBD_USR_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_USR_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[8c]">USB_Transfer_Task</a> from task.o(i.USB_Transfer_Task) referenced from task.o(i.Task_init)
 <LI><a href="#[29]">UsageFault_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8b]">Wav_Player_Task</a> from task.o(i.Wav_Player_Task) referenced from task.o(i.Task_init)
 <LI><a href="#[8a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[90]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[93]">demoNotif</a> from demo.o(i.demoNotif) referenced from demo.o(i.demoIni)
 <LI><a href="#[8f]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[88]">main</a> from components.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[94]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[91]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[95]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[92]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[99]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[98]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[9a]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[97]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[96]">wav_sai_dma_tx_callback</a> from wavplay.o(i.wav_sai_dma_tx_callback) referenced from wavplay.o(i.wav_play_song)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[2f3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ad]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2f4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2f5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2f6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2f7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2f8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[24]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a7]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[2a8]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[2c9]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2c8]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2c]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2cf]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[2f9]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2fa]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfComputeValidSENF
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetPduTransceiveStatus
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepATTRIB
</UL>

<P><STRONG><a name="[219]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipConfig
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartPduTransceive
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDiscover
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[211]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
</UL>

<P><STRONG><a name="[2fb]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2fd]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[289]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
</UL>

<P><STRONG><a name="[2ff]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1b6]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
</UL>

<P><STRONG><a name="[163]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[2e7]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95CheckChipID
</UL>

<P><STRONG><a name="[286]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfComputeValidSENF
</UL>

<P><STRONG><a name="[1b5]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
</UL>

<P><STRONG><a name="[300]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[301]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[302]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ab]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[304]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[305]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a6]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[306]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[af]"></a>ALL_GPIO_init</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, gpioconfig.o(i.ALL_GPIO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ALL_GPIO_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[b2]"></a>ALL_Init</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, main.o(i.ALL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = ALL_Init &rArr; update_font &rArr; updata_fontx &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exfuns_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_SPKvol_Set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Movie_Show_Img
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[bf]"></a>BattChek</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, oled.o(i.BattChek))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = BattChek &rArr; OLED_DrawRectangle &rArr; OLED_DrawLine &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_Task
</UL>

<P><STRONG><a name="[c4]"></a>DCD_DevDisconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_dcd.o(i.DCD_DevDisconnect))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_CloseMassStorage
</UL>

<P><STRONG><a name="[c6]"></a>DCD_EP_Close</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DCD_EP_Close &rArr; USB_OTG_EPDeactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPDeactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[c8]"></a>DCD_EP_ClrStall</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_EP_ClrStall &rArr; USB_OTG_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[ca]"></a>DCD_EP_Flush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_EP_Flush &rArr; USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
</UL>

<P><STRONG><a name="[cd]"></a>DCD_EP_Open</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[cf]"></a>DCD_EP_PrepareRx</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_PrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
</UL>

<P><STRONG><a name="[186]"></a>DCD_EP_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_dcd.o(i.DCD_EP_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[d2]"></a>DCD_EP_Stall</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_EP_Stall
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
</UL>

<P><STRONG><a name="[d4]"></a>DCD_EP_Tx</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[e2]"></a>DCD_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DCD_Init &rArr; USB_OTG_CoreInitDev &rArr; USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SelectCore
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableGlobalInt
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[69]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, sai.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Stream3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>Get_HzMat</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, text.o(i.Get_HzMat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Get_HzMat &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
</UL>

<P><STRONG><a name="[ec]"></a>HAL_DMAEx_MultiBufferStart</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_dma_ex.o(i.HAL_DMAEx_MultiBufferStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMAEx_MultiBufferStart &rArr; DMA_MultiBufferSetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MultiBufferSetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_TX_DMA_Init
</UL>

<P><STRONG><a name="[ee]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_TX_DMA_Init
</UL>

<P><STRONG><a name="[f0]"></a>HAL_DMA_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_TX_DMA_Init
</UL>

<P><STRONG><a name="[f1]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPI_nIRQ_IN_Pulse
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIResetChip
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
</UL>

<P><STRONG><a name="[b0]"></a>HAL_GPIO_Init</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_GPIO_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
</UL>

<P><STRONG><a name="[c0]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattChek
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Transfer_Task
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIPollRead
</UL>

<P><STRONG><a name="[b1]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_GPIO_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIPollSend
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendCommandTypeAndLen
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPI_nIRQ_IN_Pulse
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIResetChip
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendTransmitFlag
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendData
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIIdle
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIGetIdleResponse
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPICompleteRx
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPICommandEcho
</UL>

<P><STRONG><a name="[f2]"></a>HAL_GetTick</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, board.o(i.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
</UL>

<P><STRONG><a name="[167]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f4]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[f6]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_MspInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2f0]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_CloseMassStorage
</UL>

<P><STRONG><a name="[128]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_TX_DMA_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
</UL>

<P><STRONG><a name="[fa]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_TX_DMA_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
</UL>

<P><STRONG><a name="[f5]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PWREx_EnableOverDrive &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 644 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_SampleRate_Set
</UL>

<P><STRONG><a name="[fe]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 514 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[f8]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[100]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[101]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ff]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[102]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 806 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[103]"></a>HAL_SAI_DeInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_sai.o(i.HAL_SAI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SAI_DeInit &rArr; SAI_Disable &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspDeInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_Init
</UL>

<P><STRONG><a name="[146]"></a>HAL_SAI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sai.o(i.HAL_SAI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
</UL>

<P><STRONG><a name="[106]"></a>HAL_SAI_Init</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, stm32f4xx_hal_sai.o(i.HAL_SAI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_GetInputClock
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_BlockSynchroConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_SampleRate_Set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_Init
</UL>

<P><STRONG><a name="[105]"></a>HAL_SAI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sai.o(i.HAL_SAI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
</UL>

<P><STRONG><a name="[107]"></a>HAL_SAI_MspInit</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, sai.o(i.HAL_SAI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[10f]"></a>HAL_SD_Get_CardInfo</STRONG> (Thumb, 696 bytes, Stack size 32 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_Get_CardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SD_Get_CardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[10a]"></a>HAL_SD_Init</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SD_Init &rArr; SD_PowerON &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Get_CardInfo
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize_Cards
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[10b]"></a>HAL_SD_MspInit</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, sdio_sdcard.o(i.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[112]"></a>HAL_SD_ReadBlocks</STRONG> (Thumb, 380 bytes, Stack size 80 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_SD_ReadBlocks &rArr; HAL_SD_StopTransfer &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[115]"></a>HAL_SD_StopTransfer</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_StopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SD_StopTransfer &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[116]"></a>HAL_SD_WideBusOperation_Config</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_WideBusOperation_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[119]"></a>HAL_SD_WriteBlocks</STRONG> (Thumb, 472 bytes, Stack size 88 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SD_WriteBlocks &rArr; HAL_SD_StopTransfer &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IsCardProgramming
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteFIFO
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[11c]"></a>HAL_SPI_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[11d]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[11e]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 682 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIRxTx
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendReceiveByte
</UL>

<P><STRONG><a name="[2b0]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[124]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>HAL_UART_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[126]"></a>HAL_UART_MspInit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[16f]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[129]"></a>HAL_UART_Transmit</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartTx
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[123]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>IIC_Init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, myiic.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Init
</UL>

<P><STRONG><a name="[1a5]"></a>IIC_Send_Byte</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, myiic.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[1a4]"></a>IIC_Start</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, myiic.o(i.IIC_Start))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[12d]"></a>IIC_Stop</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, myiic.o(i.IIC_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[12c]"></a>IIC_Wait_Ack</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, myiic.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IIC_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[134]"></a>MSC_BOT_CplClrFeature</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_CplClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MSC_BOT_CplClrFeature &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[135]"></a>MSC_BOT_DataIn</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataIn
</UL>

<P><STRONG><a name="[136]"></a>MSC_BOT_DataOut</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MSC_BOT_DataOut &rArr; MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DataOut
</UL>

<P><STRONG><a name="[17a]"></a>MSC_BOT_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc_bot.o(i.MSC_BOT_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
</UL>

<P><STRONG><a name="[137]"></a>MSC_BOT_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSC_BOT_Init &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>

<P><STRONG><a name="[138]"></a>MSC_BOT_Reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_msc_bot.o(i.MSC_BOT_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MSC_BOT_Reset &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[133]"></a>MSC_BOT_SendCSW</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_msc_bot.o(i.MSC_BOT_SendCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[b9]"></a>Movie_Show_Img</STRONG> (Thumb, 106 bytes, Stack size 36 bytes, oled.o(i.Movie_Show_Img))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Movie_Show_Img &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[13d]"></a>OLED_Clear</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OLED_Clear &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_Task
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[13f]"></a>OLED_DrawLine</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, oled.o(i.OLED_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_DrawLine &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawRectangle
</UL>

<P><STRONG><a name="[139]"></a>OLED_DrawPoint</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, oled.o(i.OLED_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Movie_Show_Img
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_chars
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawLine
</UL>

<P><STRONG><a name="[c2]"></a>OLED_DrawRectangle</STRONG> (Thumb, 68 bytes, Stack size 28 bytes, oled.o(i.OLED_DrawRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OLED_DrawRectangle &rArr; OLED_DrawLine &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattChek
</UL>

<P><STRONG><a name="[c1]"></a>OLED_Fill</STRONG> (Thumb, 56 bytes, Stack size 28 bytes, oled.o(i.OLED_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_Fill &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattChek
</UL>

<P><STRONG><a name="[b7]"></a>OLED_Init</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Init &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[c3]"></a>OLED_Refresh_Gram</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, oled.o(i.OLED_Refresh_Gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattChek
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_Task
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Movie_Show_Img
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
</UL>

<P><STRONG><a name="[140]"></a>OLED_WR_Byte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[71]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_usr.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBD_OTG_ISR_Handler &rArr; DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[144]"></a>SAIA_DMA_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sai.o(i.SAIA_DMA_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_SampleRate_Set
</UL>

<P><STRONG><a name="[142]"></a>SAIA_Init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sai.o(i.SAIA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SAIA_Init &rArr; HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
</UL>

<P><STRONG><a name="[143]"></a>SAIA_SampleRate_Set</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, sai.o(i.SAIA_SampleRate_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SAIA_SampleRate_Set &rArr; HAL_SAI_Init &rArr; HAL_SAI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_DMA_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
</UL>

<P><STRONG><a name="[145]"></a>SAIA_TX_DMA_Init</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, sai.o(i.SAIA_TX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SAIA_TX_DMA_Init &rArr; HAL_DMAEx_MultiBufferStart &rArr; DMA_MultiBufferSetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_MultiBufferStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
</UL>

<P><STRONG><a name="[108]"></a>SAI_BlockSynchroConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_sai_ex.o(i.SAI_BlockSynchroConfig))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[109]"></a>SAI_GetInputClock</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f4xx_hal_sai_ex.o(i.SAI_GetInputClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAI_GetInputClock
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[1b9]"></a>SAI_Play_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sai.o(i.SAI_Play_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_start
</UL>

<P><STRONG><a name="[1bb]"></a>SAI_Play_Stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sai.o(i.SAI_Play_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop
</UL>

<P><STRONG><a name="[132]"></a>SCSI_ProcessCmd</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ProcessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_RequestSense
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[131]"></a>SCSI_SenseCode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_msc_scsi.o(i.SCSI_SenseCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadFormatCapacity
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ReadCapacity10
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[113]"></a>SDIO_DataConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_DataConfig))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[150]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetCommandResponse))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IsCardProgramming
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp6Error
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>

<P><STRONG><a name="[155]"></a>SDIO_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize_Cards
</UL>

<P><STRONG><a name="[151]"></a>SDIO_GetResponse</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IsCardProgramming
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize_Cards
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp6Error
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
</UL>

<P><STRONG><a name="[10c]"></a>SDIO_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[157]"></a>SDIO_PowerState_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[114]"></a>SDIO_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[110]"></a>SDIO_SendCommand</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IsCardProgramming
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize_Cards
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_StopTransfer
</UL>

<P><STRONG><a name="[11a]"></a>SDIO_WriteFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[154]"></a>SD_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Transfer_Task
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Init
</UL>

<P><STRONG><a name="[159]"></a>SD_ReadDisk</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_ReadDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SD_ReadDisk &rArr; HAL_SD_ReadBlocks &rArr; HAL_SD_StopTransfer &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
</UL>

<P><STRONG><a name="[15d]"></a>SD_WriteDisk</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_WriteDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SD_WriteDisk &rArr; HAL_SD_WriteBlocks &rArr; HAL_SD_StopTransfer &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
</UL>

<P><STRONG><a name="[15e]"></a>SPI1_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, spi.o(i.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[15f]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spi.o(i.SPI1_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[197]"></a>SPI1_SetSpeed</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, spi.o(i.SPI1_SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[b5]"></a>SPI3_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, spi.o(i.SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[17]"></a>STORAGE_GetCapacity</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbd_storage_msd.o(i.STORAGE_GetCapacity))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>STORAGE_GetMaxLun</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_storage_msd.o(i.STORAGE_GetMaxLun))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>STORAGE_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_storage_msd.o(i.STORAGE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = STORAGE_Init &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>STORAGE_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_storage_msd.o(i.STORAGE_IsReady))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>STORAGE_IsWriteProtected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_msd.o(i.STORAGE_IsWriteProtected))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>STORAGE_Read</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_storage_msd.o(i.STORAGE_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = STORAGE_Read &rArr; SD_ReadDisk &rArr; HAL_SD_ReadBlocks &rArr; HAL_SD_StopTransfer &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>STORAGE_Write</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_storage_msd.o(i.STORAGE_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = STORAGE_Write &rArr; SD_WriteDisk &rArr; HAL_SD_WriteBlocks &rArr; HAL_SD_StopTransfer &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data)
</UL>
<P><STRONG><a name="[160]"></a>Semaphore_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, task.o(i.Semaphore_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Semaphore_init &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[162]"></a>Show_Font</STRONG> (Thumb, 156 bytes, Stack size 184 bytes, text.o(i.Show_Font))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Show_Font &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
</UL>

<P><STRONG><a name="[13e]"></a>Show_String</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, oled.o(i.Show_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Show_String &rArr; Show_Font &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_chars
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_Task
</UL>

<P><STRONG><a name="[164]"></a>Show_chars</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, oled.o(i.Show_chars))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Show_chars &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
</UL>

<P><STRONG><a name="[165]"></a>Stm32_Clock_Init</STRONG> (Thumb, 122 bytes, Stack size 88 bytes, sys.o(i.Stm32_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Stm32_Clock_Init &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2d]"></a>SysTick_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2af]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[89]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[16a]"></a>Task_init</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, task.o(i.Task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Task_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[53]"></a>USART1_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[17f]"></a>USBD_ClrCfg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[170]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[171]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[172]"></a>USBD_CtlError</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_req.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtlError &rArr; DCD_EP_Stall
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[173]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[174]"></a>USBD_CtlSendData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Setup
</UL>

<P><STRONG><a name="[175]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[130]"></a>USBD_GetRxCount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_ioreq.o(i.USBD_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[187]"></a>USBD_GetString</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ProductStrDescriptor
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ManufacturerStrDescriptor
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_InterfaceStrDescriptor
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[177]"></a>USBD_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_Init &rArr; USB_OTG_BSP_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_EnableInterrupt
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Transfer_Task
</UL>

<P><STRONG><a name="[c]"></a>USBD_MSC_DataIn</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_msc_core.o(i.USBD_MSC_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_MSC_DataIn &rArr; MSC_BOT_DataIn &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBD_MSC_DataOut</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_msc_core.o(i.USBD_MSC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBD_MSC_DataOut &rArr; MSC_BOT_DataOut &rArr; MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USBD_MSC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_msc_core.o(i.USBD_MSC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_MSC_DeInit &rArr; DCD_EP_Close &rArr; USB_OTG_EPDeactivate
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_MSC_GetCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_msc_core.o(i.USBD_MSC_GetCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>USBD_MSC_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_msc_core.o(i.USBD_MSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_MSC_Init &rArr; MSC_BOT_Init &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MSC_DeInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBD_MSC_Setup</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, usbd_msc_core.o(i.USBD_MSC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_MSC_Setup &rArr; MSC_BOT_CplClrFeature &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Reset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CplClrFeature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data)
</UL>
<P><STRONG><a name="[141]"></a>USBD_OTG_ISR_Handler</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, usb_dcd_int.o(i.USBD_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBD_OTG_ISR_Handler &rArr; DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUSBSuspend_ISR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[182]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[180]"></a>USBD_SetCfg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[183]"></a>USBD_StdDevReq</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[185]"></a>USBD_StdEPReq</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[184]"></a>USBD_StdItfReq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[14]"></a>USBD_USR_ConfigStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>USBD_USR_DeviceConfigured</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceConfigured))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_DeviceConfigured &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>USBD_USR_DeviceConnected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_DeviceConnected &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBD_USR_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>USBD_USR_DeviceDisconnected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_DeviceDisconnected &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>USBD_USR_DeviceReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_DeviceReset &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>USBD_USR_DeviceResumed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceResumed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_DeviceResumed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>USBD_USR_DeviceSuspended</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_DeviceSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_DeviceSuspended &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_USR_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_usr.o(i.USBD_USR_Init))
<BR>[Address Reference Count : 1]<UL><LI> usbd_usr.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBD_USR_InterfaceStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_USR_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_USR_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_USR_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_USR_ProductStrDescriptor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_USR_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_USR_SerialStrDescriptor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_USR_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_USR_SerialStrDescriptor &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[179]"></a>USB_OTG_BSP_EnableInterrupt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usb_bsp.o(i.USB_OTG_BSP_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_BSP_EnableInterrupt &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[178]"></a>USB_OTG_BSP_Init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, usb_bsp.o(i.USB_OTG_BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_BSP_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[c5]"></a>USB_OTG_BSP_mDelay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_mDelay))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevDisconnect
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_SetCurrentMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[18c]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_uDelay))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>

<P><STRONG><a name="[e5]"></a>USB_OTG_CoreInit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_CoreInit &rArr; USB_OTG_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[e7]"></a>USB_OTG_CoreInitDev</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreInitDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_CoreInitDev &rArr; USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitDevSpeed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushRxFifo
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EnableDevInt
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[e4]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[d6]"></a>USB_OTG_EP0Activate</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EP0Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[d1]"></a>USB_OTG_EP0StartXfer</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[da]"></a>USB_OTG_EP0_OutStart</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_EP0_OutStart))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[ce]"></a>USB_OTG_EPActivate</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EPActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[c9]"></a>USB_OTG_EPClearStall</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[c7]"></a>USB_OTG_EPDeactivate</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, usb_core.o(i.USB_OTG_EPDeactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_EPDeactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Close
</UL>

<P><STRONG><a name="[d3]"></a>USB_OTG_EPSetStall</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_EPSetStall))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>

<P><STRONG><a name="[d0]"></a>USB_OTG_EPStartXfer</STRONG> (Thumb, 296 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[18b]"></a>USB_OTG_EnableDevInt</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, usb_core.o(i.USB_OTG_EnableDevInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_EnableDevInt
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[e8]"></a>USB_OTG_EnableGlobalInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[cc]"></a>USB_OTG_FlushRxFifo</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_FlushRxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[cb]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Flush
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[d7]"></a>USB_OTG_GetDeviceSpeed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_GetDeviceSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[18a]"></a>USB_OTG_InitDevSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_InitDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInitDev
</UL>

<P><STRONG><a name="[17b]"></a>USB_OTG_IsDeviceMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_IsDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[17c]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadCoreItr))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[d9]"></a>USB_OTG_ReadDevAllInEPItr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllInEPItr))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[dd]"></a>USB_OTG_ReadDevAllOutEp_itr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllOutEp_itr))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[de]"></a>USB_OTG_ReadDevOutEP_itr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevOutEP_itr))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[e0]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
</UL>

<P><STRONG><a name="[e3]"></a>USB_OTG_SelectCore</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_SelectCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_SelectCore
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[e6]"></a>USB_OTG_SetCurrentMode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_SetCurrentMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_Init
</UL>

<P><STRONG><a name="[e9]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_core.o(i.USB_OTG_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
</UL>

<P><STRONG><a name="[194]"></a>W25QXX_Erase_Sector</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = W25QXX_Erase_Sector &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[b4]"></a>W25QXX_Init</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, w25qxx.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = W25QXX_Init &rArr; SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[eb]"></a>W25QXX_Read</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = W25QXX_Read &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
</UL>

<P><STRONG><a name="[198]"></a>W25QXX_ReadID</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = W25QXX_ReadID &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[199]"></a>W25QXX_ReadSR</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[196]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[19a]"></a>W25QXX_Write</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, w25qxx.o(i.W25QXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_fontx
</UL>

<P><STRONG><a name="[195]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = W25QXX_Write_Enable &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[19b]"></a>W25QXX_Write_NoCheck</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[19c]"></a>W25QXX_Write_Page</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[19d]"></a>WM8978_ADDA_Cfg</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm8978.o(i.WM8978_ADDA_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WM8978_ADDA_Cfg &rArr; WM8978_Write_Reg &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[19f]"></a>WM8978_AUX_Gain</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm8978.o(i.WM8978_AUX_Gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WM8978_AUX_Gain &rArr; WM8978_Write_Reg &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Input_Cfg
</UL>

<P><STRONG><a name="[1a0]"></a>WM8978_I2S_Cfg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm8978.o(i.WM8978_I2S_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WM8978_I2S_Cfg &rArr; WM8978_Write_Reg &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
</UL>

<P><STRONG><a name="[b6]"></a>WM8978_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, wm8978.o(i.WM8978_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WM8978_Init &rArr; IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[1a1]"></a>WM8978_Input_Cfg</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, wm8978.o(i.WM8978_Input_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WM8978_Input_Cfg &rArr; WM8978_LINEIN_Gain &rArr; WM8978_Write_Reg &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_LINEIN_Gain
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_AUX_Gain
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[1a2]"></a>WM8978_LINEIN_Gain</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm8978.o(i.WM8978_LINEIN_Gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WM8978_LINEIN_Gain &rArr; WM8978_Write_Reg &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Input_Cfg
</UL>

<P><STRONG><a name="[1a3]"></a>WM8978_Output_Cfg</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm8978.o(i.WM8978_Output_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WM8978_Output_Cfg &rArr; WM8978_Write_Reg &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[b8]"></a>WM8978_SPKvol_Set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm8978.o(i.WM8978_SPKvol_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WM8978_SPKvol_Set &rArr; WM8978_Write_Reg &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[19e]"></a>WM8978_Write_Reg</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wm8978.o(i.WM8978_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WM8978_Write_Reg &rArr; IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_SPKvol_Set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Output_Cfg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_LINEIN_Gain
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Input_Cfg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_I2S_Cfg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_AUX_Gain
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_ADDA_Cfg
</UL>

<P><STRONG><a name="[1a7]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[308]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[be]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wav_Player_Task
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Transfer_Task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_Task
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Transfer_Task
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceSuspended
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceResumed
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceReset
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceDisconnected
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceConnected
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_DeviceConfigured
</UL>

<P><STRONG><a name="[309]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[30a]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1a9]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[30b]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[30c]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[30d]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[214]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[2c7]"></a>__rt_ffs</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[30e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[30f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[310]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1a6]"></a>audio_play</STRONG> (Thumb, 106 bytes, Stack size 88 bytes, audioplay.o(i.audio_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = audio_play &rArr; wav_play_song &rArr; wav_decode_init &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Output_Cfg
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Input_Cfg
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_ADDA_Cfg
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wav_Player_Task
</UL>

<P><STRONG><a name="[1b8]"></a>audio_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, audioplay.o(i.audio_start))
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Play_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
</UL>

<P><STRONG><a name="[1ba]"></a>audio_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, audioplay.o(i.audio_stop))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_Play_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
</UL>

<P><STRONG><a name="[13c]"></a>demoCycle</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, demo.o(i.demoCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = demoCycle &rArr; demoP2P &rArr; demoTransceiveBlocking &rArr; rfalNfcWorker &rArr; rfalNfcPollActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadSingleBlock
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcGetState
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcGetActiveDevice
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDiscover
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivate
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAPDU
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Transfer_Task
</UL>

<P><STRONG><a name="[13a]"></a>demoIni</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, demo.o(i.demoIni))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = demoIni &rArr; rfalNfcInitialize &rArr; rfalInitialize &rArr; st25r95CheckChipID &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcInitialize
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Transfer_Task
</UL>

<P><STRONG><a name="[1d1]"></a>demoTransceiveBlocking</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, demo.o(i.demoTransceiveBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = demoTransceiveBlocking &rArr; rfalNfcWorker &rArr; rfalNfcPollActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAPDU
</UL>

<P><STRONG><a name="[1e2]"></a>dir_sdi</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_dir
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[1f2]"></a>disk_initialize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2ed]"></a>disk_ioctl</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1f3]"></a>disk_read</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = disk_read &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[208]"></a>disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1f4]"></a>disk_write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[ba]"></a>exfuns_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, exfuns.o(i.exfuns_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = exfuns_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[1f5]"></a>f_close</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = f_close &rArr; f_sync &rArr; load_obj_dir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decode_init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_fontx
</UL>

<P><STRONG><a name="[1f8]"></a>f_lseek</STRONG> (Thumb, 702 bytes, Stack size 72 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = f_lseek &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
</UL>

<P><STRONG><a name="[bb]"></a>f_mount</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[1fb]"></a>f_open</STRONG> (Thumb, 632 bytes, Stack size 144 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_qword
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decode_init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_fontx
</UL>

<P><STRONG><a name="[1b3]"></a>f_opendir</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[205]"></a>f_read</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decode_init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_buffill
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_fontx
</UL>

<P><STRONG><a name="[1b4]"></a>f_readdir</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = f_readdir &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[1f6]"></a>f_sync</STRONG> (Thumb, 338 bytes, Stack size 96 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = f_sync &rArr; load_obj_dir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_qword
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_dir
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_fat_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1ca]"></a>ff_convert</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, mycc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ff_convert &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xdir_info
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1fc]"></a>ff_memalloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[204]"></a>ff_memfree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ff_memfree &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1c4]"></a>ff_wtoupper</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mycc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[bc]"></a>font_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fontupd.o(i.font_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = font_init &rArr; W25QXX_Init &rArr; SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[8f]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[1fe]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1d2]"></a>hex2Str</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, logger.o(i.hex2Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hex2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAPDU
</UL>

<P><STRONG><a name="[13b]"></a>logUsart</STRONG> (Thumb, 46 bytes, Stack size 280 bytes, logger.o(i.logUsart))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = logUsart &rArr; logUsartTx &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartTx
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Transfer_Task
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcGetActiveDevice
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoP2P
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNotif
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAPDU
</UL>

<P><STRONG><a name="[2ee]"></a>logUsartInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, logger.o(i.logUsartInit))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[215]"></a>logUsartTx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, logger.o(i.logUsartTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = logUsartTx &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>

<P><STRONG><a name="[216]"></a>$Super$$main</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = $Super$$main &rArr; ALL_Init &rArr; update_font &rArr; updata_fontx &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Semaphore_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[94]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; ALL_Init &rArr; update_font &rArr; updata_fontx &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[261]"></a>rfalAnalogConfigInitialize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfal_analogconfig.o(i.rfalAnalogConfigInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcInitialize
</UL>

<P><STRONG><a name="[225]"></a>rfalChipChangeRegBits</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, rfal_rfst25r95.o(i.rfalChipChangeRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rfalChipChangeRegBits &rArr; st25r95ReadReg &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95WriteReg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[28e]"></a>rfalChipChangeTestRegBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rfal_rfst25r95.o(i.rfalChipChangeTestRegBits))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[228]"></a>rfalFeliCaPoll</STRONG> (Thumb, 194 bytes, Stack size 80 bytes, rfal_rfst25r95.o(i.rfalFeliCaPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SetSlotCounter
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheckPresence
</UL>

<P><STRONG><a name="[22a]"></a>rfalFieldOff</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rfal_rfst25r95.o(i.rfalFieldOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rfalFieldOff &rArr; st25r95FieldOff &rArr; st25r95ProtocolSelect &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipIsBusy
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95FieldOff
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
</UL>

<P><STRONG><a name="[22e]"></a>rfalFieldOnAndStartGT</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rfal_rfst25r95.o(i.rfalFieldOnAndStartGT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rfalFieldOnAndStartGT &rArr; st25r95FieldOn &rArr; st25r95ProtocolSelect &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipIsBusy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95FieldOn
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[25e]"></a>rfalGetBitRate</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rfal_rfst25r95.o(i.rfalGetBitRate))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPICompleteRx
</UL>

<P><STRONG><a name="[20d]"></a>rfalGetTransceiveStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfal_rfst25r95.o(i.rfalGetTransceiveStatus))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>

<P><STRONG><a name="[230]"></a>rfalISO14443ATransceiveAnticollisionFrame</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, rfal_rfst25r95.o(i.rfalISO14443ATransceiveAnticollisionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rfalISO14443ATransceiveAnticollisionFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
</UL>

<P><STRONG><a name="[233]"></a>rfalISO14443ATransceiveShortFrame</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, rfal_rfst25r95.o(i.rfalISO14443ATransceiveShortFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rfalISO14443ATransceiveShortFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
</UL>

<P><STRONG><a name="[234]"></a>rfalISO15693TransceiveAnticollisionFrame</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, rfal_rfst25r95.o(i.rfalISO15693TransceiveAnticollisionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOFAnticollision
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
</UL>

<P><STRONG><a name="[235]"></a>rfalISO15693TransceiveEOF</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, rfal_rfst25r95.o(i.rfalISO15693TransceiveEOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rfalISO15693TransceiveEOF &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>

<P><STRONG><a name="[237]"></a>rfalISO15693TransceiveEOFAnticollision</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rfal_rfst25r95.o(i.rfalISO15693TransceiveEOFAnticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rfalISO15693TransceiveEOFAnticollision &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
</UL>

<P><STRONG><a name="[238]"></a>rfalInitialize</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rfal_rfst25r95.o(i.rfalInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rfalInitialize &rArr; st25r95CheckChipID &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipIsBusy
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95Initialize
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95CheckChipID
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95CalibrateTagDetector
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcInitialize
</UL>

<P><STRONG><a name="[23c]"></a>rfalIsGTExpired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rfal_rfst25r95.o(i.rfalIsGTExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalIsGTExpired &rArr; timerIsExpired &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[298]"></a>rfalIsTransceiveInRx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfal_rfst25r95.o(i.rfalIsTransceiveInRx))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>

<P><STRONG><a name="[299]"></a>rfalIsTransceiveInTx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_rfst25r95.o(i.rfalIsTransceiveInTx))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>

<P><STRONG><a name="[23d]"></a>rfalIsoDepATTRIB</STRONG> (Thumb, 182 bytes, Stack size 96 bytes, rfal_isodep.o(i.rfalIsoDepATTRIB))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rfalIsoDepATTRIB &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
</UL>

<P><STRONG><a name="[240]"></a>rfalIsoDepDeselect</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rfal_isodep.o(i.rfalIsoDepDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rfalIsoDepDeselect &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[24a]"></a>rfalIsoDepFSxI2FSx</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepFSxI2FSx))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepRATS
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[24c]"></a>rfalIsoDepFWI2FWT</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepFWI2FWT))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[242]"></a>rfalIsoDepGetApduTransceiveStatus</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, rfal_isodep.o(i.rfalIsoDepGetApduTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = rfalIsoDepGetApduTransceiveStatus &rArr; rfalIsoDepGetTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepApdu2IBLockParam
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
</UL>

<P><STRONG><a name="[23f]"></a>rfalIsoDepGetMaxInfLen</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepGetMaxInfLen))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepApdu2IBLockParam
</UL>

<P><STRONG><a name="[243]"></a>rfalIsoDepGetTransceiveStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepGetTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rfalIsoDepGetTransceiveStatus &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[20f]"></a>rfalIsoDepInitialize</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, rfal_isodep.o(i.rfalIsoDepInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rfalIsoDepInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>

<P><STRONG><a name="[245]"></a>rfalIsoDepPPS</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, rfal_isodep.o(i.rfalIsoDepPPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rfalIsoDepPPS &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[246]"></a>rfalIsoDepPollAHandleActivation</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, rfal_isodep.o(i.rfalIsoDepPollAHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rfalIsoDepPollAHandleActivation &rArr; rfalIsoDepDeselect &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepSFGI2SFGT
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepCalcBitRate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepRATS
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPPS
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[24e]"></a>rfalIsoDepPollBHandleActivation</STRONG> (Thumb, 306 bytes, Stack size 88 bytes, rfal_isodep.o(i.rfalIsoDepPollBHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = rfalIsoDepPollBHandleActivation &rArr; rfalIsoDepATTRIB &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepSFGI2SFGT
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepCalcBitRate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbTR2ToFDT
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFWI2FWT
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepATTRIB
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[248]"></a>rfalIsoDepRATS</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, rfal_isodep.o(i.rfalIsoDepRATS))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rfalIsoDepRATS &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepFSxI2FSx
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[251]"></a>rfalIsoDepStartApduTransceive</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, rfal_isodep.o(i.rfalIsoDepStartApduTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rfalIsoDepStartApduTransceive &rArr; rfalIsoDepApdu2IBLockParam
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepApdu2IBLockParam
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
</UL>

<P><STRONG><a name="[244]"></a>rfalIsoDepStartTransceive</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, rfal_isodep.o(i.rfalIsoDepStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalIsoDepStartTransceive
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[1e0]"></a>rfalNfcDataExchangeGetStatus</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rfal_nfc.o(i.rfalNfcDataExchangeGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = rfalNfcDataExchangeGetStatus &rArr; rfalNfcDepGetPduTransceiveStatus &rArr; rfalNfcDepGetTransceiveStatus &rArr; nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetPduTransceiveStatus
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTransceiveBlocking
</UL>

<P><STRONG><a name="[1df]"></a>rfalNfcDataExchangeStart</STRONG> (Thumb, 390 bytes, Stack size 120 bytes, rfal_nfc.o(i.rfalNfcDataExchangeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rfalNfcDataExchangeStart &rArr; rfalStartTransceive &rArr; st25r95SetFWT &rArr; st25r95ProtocolSelect &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartPduTransceive
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTransceiveBlocking
</UL>

<P><STRONG><a name="[1d6]"></a>rfalNfcDeactivate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rfal_nfc.o(i.rfalNfcDeactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rfalNfcDeactivate &rArr; rfalNfcDeactivation &rArr; rfalIsoDepDeselect &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[257]"></a>rfalNfcDepATR</STRONG> (Thumb, 236 bytes, Stack size 256 bytes, rfal_nfcdep.o(i.rfalNfcDepATR))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipConfig
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[25d]"></a>rfalNfcDepCalculateRWT</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepCalculateRWT))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[255]"></a>rfalNfcDepDSL</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.rfalNfcDepDSL))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rfalNfcDepDSL &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
</UL>

<P><STRONG><a name="[252]"></a>rfalNfcDepGetPduTransceiveStatus</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, rfal_nfcdep.o(i.rfalNfcDepGetPduTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = rfalNfcDepGetPduTransceiveStatus &rArr; rfalNfcDepGetTransceiveStatus &rArr; nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartTransceive
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPdu2BLockParam
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
</UL>

<P><STRONG><a name="[259]"></a>rfalNfcDepGetTransceiveStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepGetTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = rfalNfcDepGetTransceiveStatus &rArr; nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetPduTransceiveStatus
</UL>

<P><STRONG><a name="[258]"></a>rfalNfcDepInitialize</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.rfalNfcDepInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
</UL>

<P><STRONG><a name="[25c]"></a>rfalNfcDepInitiatorHandleActivation</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, rfal_nfcdep.o(i.rfalNfcDepInitiatorHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetBitRate
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepCalculateRWT
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
</UL>

<P><STRONG><a name="[25f]"></a>rfalNfcDepPSL</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.rfalNfcDepPSL))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rfalNfcDepPSL &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[256]"></a>rfalNfcDepRLS</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.rfalNfcDepRLS))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rfalNfcDepRLS &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
</UL>

<P><STRONG><a name="[253]"></a>rfalNfcDepStartPduTransceive</STRONG> (Thumb, 70 bytes, Stack size 88 bytes, rfal_nfcdep.o(i.rfalNfcDepStartPduTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rfalNfcDepStartPduTransceive &rArr; rfalNfcDepStartTransceive &rArr; nfcipSetDEPParams
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartTransceive
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPdu2BLockParam
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
</UL>

<P><STRONG><a name="[25b]"></a>rfalNfcDepStartTransceive</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.rfalNfcDepStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rfalNfcDepStartTransceive &rArr; nfcipSetDEPParams
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipSetDEPParams
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartPduTransceive
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetPduTransceiveStatus
</UL>

<P><STRONG><a name="[1d7]"></a>rfalNfcDiscover</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, rfal_nfc.o(i.rfalNfcDiscover))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rfalNfcDiscover &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[1d5]"></a>rfalNfcGetActiveDevice</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rfal_nfc.o(i.rfalNfcGetActiveDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rfalNfcGetActiveDevice &rArr; logUsart &rArr; logUsartTx &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[1dd]"></a>rfalNfcGetDevicesFound</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcGetDevicesFound))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNotif
</UL>

<P><STRONG><a name="[1d4]"></a>rfalNfcGetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcGetState))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[1db]"></a>rfalNfcInitialize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rfal_nfc.o(i.rfalNfcInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rfalNfcInitialize &rArr; rfalInitialize &rArr; st25r95CheckChipID &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalAnalogConfigInitialize
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
</UL>

<P><STRONG><a name="[1de]"></a>rfalNfcSelect</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfal_nfc.o(i.rfalNfcSelect))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNotif
</UL>

<P><STRONG><a name="[1d3]"></a>rfalNfcWorker</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, rfal_nfc.o(i.rfalNfcWorker))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = rfalNfcWorker &rArr; rfalNfcPollActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeHasWoke
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeGetStatus
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTransceiveBlocking
</UL>

<P><STRONG><a name="[265]"></a>rfalNfcaPollerCheckPresence</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rfal_nfca.o(i.rfalNfcaPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rfalNfcaPollerCheckPresence &rArr; rfalISO14443ATransceiveShortFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[26c]"></a>rfalNfcaPollerFullCollisionResolution</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, rfal_nfca.o(i.rfalNfcaPollerFullCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = rfalNfcaPollerFullCollisionResolution &rArr; rfalNfcaPollerSingleCollisionResolution &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerRid
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[264]"></a>rfalNfcaPollerInitialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rfal_nfca.o(i.rfalNfcaPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rfalNfcaPollerInitialize &rArr; rfalSetMode &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r95ReadReg &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[266]"></a>rfalNfcaPollerSelect</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, rfal_nfca.o(i.rfalNfcaPollerSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rfalNfcaPollerSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaCalculateBcc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[27e]"></a>rfalNfcaPollerSingleCollisionResolution</STRONG> (Thumb, 656 bytes, Stack size 104 bytes, rfal_nfca.o(i.rfalNfcaPollerSingleCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rfalNfcaPollerSingleCollisionResolution &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaCalculateBcc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[27f]"></a>rfalNfcaPollerSleep</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, rfal_nfca.o(i.rfalNfcaPollerSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rfalNfcaPollerSleep &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[275]"></a>rfalNfcaPollerTechnologyDetection</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rfal_nfca.o(i.rfalNfcaPollerTechnologyDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rfalNfcaPollerTechnologyDetection &rArr; rfalNfcaPollerSleep &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[268]"></a>rfalNfcbPollerCheckPresence</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, rfal_nfcb.o(i.rfalNfcbPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rfalNfcbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbCheckSensbRes
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerTechnologyDetection
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[26d]"></a>rfalNfcbPollerCollisionResolution</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, rfal_nfcb.o(i.rfalNfcbPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rfalNfcbPollerCollisionResolution &rArr; rfalNfcbPollerSlottedCollisionResolution &rArr; rfalNfcbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[267]"></a>rfalNfcbPollerInitialize</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rfal_nfcb.o(i.rfalNfcbPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rfalNfcbPollerInitialize &rArr; rfalSetMode &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r95ReadReg &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[283]"></a>rfalNfcbPollerSleep</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, rfal_nfcb.o(i.rfalNfcbPollerSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rfalNfcbPollerSleep &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
</UL>

<P><STRONG><a name="[284]"></a>rfalNfcbPollerSlotMarker</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rfal_nfcb.o(i.rfalNfcbPollerSlotMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rfalNfcbPollerSlotMarker &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbCheckSensbRes
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
</UL>

<P><STRONG><a name="[282]"></a>rfalNfcbPollerSlottedCollisionResolution</STRONG> (Thumb, 468 bytes, Stack size 56 bytes, rfal_nfcb.o(i.rfalNfcbPollerSlottedCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rfalNfcbPollerSlottedCollisionResolution &rArr; rfalNfcbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlotMarker
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSleep
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbCheckSensbRes
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolution
</UL>

<P><STRONG><a name="[276]"></a>rfalNfcbPollerTechnologyDetection</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbPollerTechnologyDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rfalNfcbPollerTechnologyDetection &rArr; rfalNfcbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[24f]"></a>rfalNfcbTR2ToFDT</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, rfal_nfcb.o(i.rfalNfcbTR2ToFDT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rfalNfcbTR2ToFDT
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
</UL>

<P><STRONG><a name="[1dc]"></a>rfalNfcfPollerCheck</STRONG> (Thumb, 262 bytes, Stack size 120 bytes, rfal_nfcf.o(i.rfalNfcfPollerCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rfalNfcfPollerCheck &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoNfcf
</UL>

<P><STRONG><a name="[277]"></a>rfalNfcfPollerCheckPresence</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rfal_nfcf.o(i.rfalNfcfPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rfalNfcfPollerCheckPresence &rArr; rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[26e]"></a>rfalNfcfPollerCollisionResolution</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, rfal_nfcf.o(i.rfalNfcfPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rfalNfcfPollerCollisionResolution &rArr; rfalNfcfPollerPoll &rArr; rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerPoll
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfComputeValidSENF
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[260]"></a>rfalNfcfPollerInitialize</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rfal_nfcf.o(i.rfalNfcfPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rfalNfcfPollerInitialize &rArr; rfalSetMode &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r95ReadReg &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[287]"></a>rfalNfcfPollerPoll</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, rfal_nfcf.o(i.rfalNfcfPollerPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rfalNfcfPollerPoll &rArr; rfalFeliCaPoll &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
</UL>

<P><STRONG><a name="[278]"></a>rfalNfcvPollerCheckPresence</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rfal_nfcv.o(i.rfalNfcvPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rfalNfcvPollerCheckPresence &rArr; rfalNfcvPollerInventory &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[26f]"></a>rfalNfcvPollerCollisionResolution</STRONG> (Thumb, 360 bytes, Stack size 200 bytes, rfal_nfcv.o(i.rfalNfcvPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = rfalNfcvPollerCollisionResolution &rArr; rfalNfcvPollerInventory &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOFAnticollision
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInventory
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[269]"></a>rfalNfcvPollerInitialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rfal_nfcv.o(i.rfalNfcvPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rfalNfcvPollerInitialize &rArr; rfalSetMode &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r95ReadReg &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[288]"></a>rfalNfcvPollerInventory</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, rfal_nfcv.o(i.rfalNfcvPollerInventory))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rfalNfcvPollerInventory &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCheckPresence
</UL>

<P><STRONG><a name="[1da]"></a>rfalNfcvPollerReadSingleBlock</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, rfal_nfcv.o(i.rfalNfcvPollerReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = rfalNfcvPollerReadSingleBlock &rArr; rfalNfcvPollerTransceiveReq &rArr; rfalISO15693TransceiveEOF &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[28a]"></a>rfalNfcvPollerTransceiveReq</STRONG> (Thumb, 322 bytes, Stack size 112 bytes, rfal_nfcv.o(i.rfalNfcvPollerTransceiveReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rfalNfcvPollerTransceiveReq &rArr; rfalISO15693TransceiveEOF &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOF
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvParseError
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetBitRate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerReadSingleBlock
</UL>

<P><STRONG><a name="[28c]"></a>rfalSetAnalogConfig</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, rfal_analogconfig.o(i.rfalSetAnalogConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r95ReadReg &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeTestRegBits
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalAnalogConfigSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
</UL>

<P><STRONG><a name="[24d]"></a>rfalSetBitRate</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rfal_rfst25r95.o(i.rfalSetBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rfalSetBitRate &rArr; st25r95ProtocolSelect &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipIsBusy
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SetBitRate
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[247]"></a>rfalSetErrorHandling</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rfal_rfst25r95.o(i.rfalSetErrorHandling))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[273]"></a>rfalSetFDTListen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfal_rfst25r95.o(i.rfalSetFDTListen))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[250]"></a>rfalSetFDTPoll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfal_rfst25r95.o(i.rfalSetFDTPoll))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
</UL>

<P><STRONG><a name="[274]"></a>rfalSetGT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rfal_rfst25r95.o(i.rfalSetGT))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[272]"></a>rfalSetMode</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, rfal_rfst25r95.o(i.rfalSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rfalSetMode &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r95ReadReg &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipIsBusy
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[279]"></a>rfalSt25tbPollerCheckPresence</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rfal_st25tb.o(i.rfalSt25tbPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rfalSt25tbPollerCheckPresence &rArr; rfalSt25tbPollerInitiate &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitiate
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
</UL>

<P><STRONG><a name="[270]"></a>rfalSt25tbPollerCollisionResolution</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, rfal_st25tb.o(i.rfalSt25tbPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rfalSt25tbPollerCollisionResolution &rArr; rfalSt25tbPollerDoCollisionResolution &rArr; rfalSt25tbPollerSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSelect
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitiate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerGetUID
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
</UL>

<P><STRONG><a name="[293]"></a>rfalSt25tbPollerGetUID</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rfal_st25tb.o(i.rfalSt25tbPollerGetUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rfalSt25tbPollerGetUID &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
</UL>

<P><STRONG><a name="[26a]"></a>rfalSt25tbPollerInitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rfal_st25tb.o(i.rfalSt25tbPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rfalSt25tbPollerInitialize &rArr; rfalNfcbPollerInitialize &rArr; rfalSetMode &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r95ReadReg &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollCollResolution
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[291]"></a>rfalSt25tbPollerInitiate</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, rfal_st25tb.o(i.rfalSt25tbPollerInitiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rfalSt25tbPollerInitiate &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCheckPresence
</UL>

<P><STRONG><a name="[296]"></a>rfalSt25tbPollerPcall</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rfal_st25tb.o(i.rfalSt25tbPollerPcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rfalSt25tbPollerPcall &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
</UL>

<P><STRONG><a name="[292]"></a>rfalSt25tbPollerSelect</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, rfal_st25tb.o(i.rfalSt25tbPollerSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rfalSt25tbPollerSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
</UL>

<P><STRONG><a name="[295]"></a>rfalSt25tbPollerSlotMarker</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, rfal_st25tb.o(i.rfalSt25tbPollerSlotMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rfalSt25tbPollerSlotMarker &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerDoCollisionResolution
</UL>

<P><STRONG><a name="[231]"></a>rfalStartTransceive</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rfal_rfst25r95.o(i.rfalStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rfalStartTransceive &rArr; st25r95SetFWT &rArr; st25r95ProtocolSelect &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipIsBusy
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SetFWT
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDataExchangeStart
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>

<P><STRONG><a name="[27c]"></a>rfalT1TPollerInitialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rfal_t1t.o(i.rfalT1TPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rfalT1TPollerInitialize &rArr; rfalSetMode &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeRegBits &rArr; st25r95ReadReg &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[27d]"></a>rfalT1TPollerRid</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, rfal_t1t.o(i.rfalT1TPollerRid))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rfalT1TPollerRid &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[21d]"></a>rfalTransceiveBlockingRx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rfal_rfst25r95.o(i.rfalTransceiveBlockingRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInRx
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>

<P><STRONG><a name="[212]"></a>rfalTransceiveBlockingTx</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, rfal_rfst25r95.o(i.rfalTransceiveBlockingTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>

<P><STRONG><a name="[236]"></a>rfalTransceiveBlockingTxRx</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, rfal_rfst25r95.o(i.rfalTransceiveBlockingTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveEOF
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlotMarker
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSleep
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerRid
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSleep
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSelect
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepRATS
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPPS
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepATTRIB
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSlotMarker
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSelect
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerPcall
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitiate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerGetUID
</UL>

<P><STRONG><a name="[27b]"></a>rfalWakeUpModeHasWoke</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfal_rfst25r95.o(i.rfalWakeUpModeHasWoke))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[27a]"></a>rfalWakeUpModeStart</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, rfal_rfst25r95.o(i.rfalWakeUpModeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rfalWakeUpModeStart &rArr; st25r95SPIIdle &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIIdle
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[22c]"></a>rfalWakeUpModeStop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rfal_rfst25r95.o(i.rfalWakeUpModeStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rfalWakeUpModeStop &rArr; st25r95SPIKillIdle &rArr; st25r95SPIGetIdleResponse &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipIsBusy
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIKillIdle
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPICommandEcho
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivation
</UL>

<P><STRONG><a name="[241]"></a>rfalWorker</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rfal_rfst25r95.o(i.rfalWorker))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIPollRead
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIGetIdleResponse
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInTx
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInRx
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRunBlockingTx
</UL>

<P><STRONG><a name="[2a6]"></a>rt_application_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2b2]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[217]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[15a]"></a>rt_enter_critical</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[15c]"></a>rt_exit_critical</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[192]"></a>rt_free</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, mem.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Transfer_Task
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decode_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_fontx
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[2b4]"></a>rt_heap_begin_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.rt_heap_begin_get))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2b3]"></a>rt_heap_end_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.rt_heap_end_get))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2ae]"></a>rt_hw_board_init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = rt_hw_board_init &rArr; Stm32_Clock_Init &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_GPIO_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_end_get
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_begin_get
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2b6]"></a>rt_hw_console_output</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, board.o(i.rt_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_hw_console_output &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[9d]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[1b1]"></a>rt_hw_stack_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[166]"></a>rt_interrupt_enter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[169]"></a>rt_interrupt_leave</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2ab]"></a>rt_kprintf</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[18d]"></a>rt_malloc</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, mem.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Transfer_Task
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exfuns_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decode_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_fontx
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[1b0]"></a>rt_memset</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[161]"></a>rt_mutex_create</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ipc.o(i.rt_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Semaphore_init
</UL>

<P><STRONG><a name="[190]"></a>rt_mutex_release</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wav_Player_Task
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Transfer_Task
</UL>

<P><STRONG><a name="[18e]"></a>rt_mutex_take</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wav_Player_Task
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Transfer_Task
</UL>

<P><STRONG><a name="[2bc]"></a>rt_object_allocate</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>

<P><STRONG><a name="[2c3]"></a>rt_object_delete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[2c5]"></a>rt_object_detach</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2c0]"></a>rt_object_get_information</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[2c6]"></a>rt_object_init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[2d4]"></a>rt_object_is_systemobject</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2a9]"></a>rt_schedule</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[2ca]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[2cb]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[2cc]"></a>rt_sem_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[2ad]"></a>rt_sem_release</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[2aa]"></a>rt_sem_take</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[2cd]"></a>rt_show_version</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2e1]"></a>rt_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kservice.o(i.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[2c1]"></a>rt_strncpy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[2b5]"></a>rt_system_heap_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, mem.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2e4]"></a>rt_system_scheduler_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2ce]"></a>rt_system_scheduler_start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2e3]"></a>rt_system_timer_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer_1.o(i.rt_system_timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2e5]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer_1.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2bd]"></a>rt_thread_control</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, thread.o(i.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_control &rArr; rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[16b]"></a>rt_thread_create</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[b3]"></a>rt_thread_delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wav_Player_Task
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Transfer_Task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_Task
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_Transfer_Task
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[2d0]"></a>rt_thread_delete</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, thread.o(i.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[91]"></a>rt_thread_exit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_exit &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[2d5]"></a>rt_thread_idle_excute</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[2d7]"></a>rt_thread_idle_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2d8]"></a>rt_thread_init</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[193]"></a>rt_thread_resume</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Transfer_Task
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>

<P><STRONG><a name="[2b7]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[2d1]"></a>rt_thread_sleep</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[16c]"></a>rt_thread_startup</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[18f]"></a>rt_thread_suspend</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Transfer_Task
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[92]"></a>rt_thread_timeout</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[2db]"></a>rt_thread_yield</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_thread_yield &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[f3]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[168]"></a>rt_tick_increase</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2dc]"></a>rt_timer_check</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timer_1.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_check &rArr; rt_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[2be]"></a>rt_timer_control</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, timer_1.o(i.rt_timer_control))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[2d2]"></a>rt_timer_detach</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer_1.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[1b2]"></a>rt_timer_init</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, timer_1.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[2bf]"></a>rt_timer_start</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, timer_1.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[2da]"></a>rt_timer_stop</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timer_1.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[2bb]"></a>rt_vsnprintf</STRONG> (Thumb, 626 bytes, Stack size 64 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[ae]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23b]"></a>st25r95CalibrateTagDetector</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, st25r95_com.o(i.st25r95CalibrateTagDetector))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = st25r95CalibrateTagDetector &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendCommandTypeAndLen
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[23a]"></a>st25r95CheckChipID</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, st25r95_com.o(i.st25r95CheckChipID))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = st25r95CheckChipID &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendCommandTypeAndLen
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[22d]"></a>st25r95FieldOff</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st25r95.o(i.st25r95FieldOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = st25r95FieldOff &rArr; st25r95ProtocolSelect &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
</UL>

<P><STRONG><a name="[22f]"></a>st25r95FieldOn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, st25r95.o(i.st25r95FieldOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = st25r95FieldOn &rArr; st25r95ProtocolSelect &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>

<P><STRONG><a name="[239]"></a>st25r95Initialize</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, st25r95.o(i.st25r95Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = st25r95Initialize &rArr; st25r95SPICommandEcho &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPI_nIRQ_IN_Pulse
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIResetChip
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPICommandEcho
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[290]"></a>st25r95ProtocolSelect</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, st25r95_com.o(i.st25r95ProtocolSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = st25r95ProtocolSelect &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendCommandTypeAndLen
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SetSlotCounter
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SetFWT
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95FieldOn
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95FieldOff
</UL>

<P><STRONG><a name="[226]"></a>st25r95ReadReg</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, st25r95_com.o(i.st25r95ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = st25r95ReadReg &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendCommandTypeAndLen
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
</UL>

<P><STRONG><a name="[2a4]"></a>st25r95SPICommandEcho</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, st25r95_com_spi.o(i.st25r95SPICommandEcho))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = st25r95SPICommandEcho &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIRxTx
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIPollSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendReceiveByte
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIPollRead
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95Initialize
</UL>

<P><STRONG><a name="[29c]"></a>st25r95SPICompleteRx</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, st25r95_com_spi.o(i.st25r95SPICompleteRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetBitRate
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIRxTx
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[2a5]"></a>st25r95SPIGetIdleResponse</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, st25r95_com_spi.o(i.st25r95SPIGetIdleResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = st25r95SPIGetIdleResponse &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIRxTx
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIKillIdle
</UL>

<P><STRONG><a name="[2a2]"></a>st25r95SPIIdle</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, st25r95_com_spi.o(i.st25r95SPIIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = st25r95SPIIdle &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIRxTx
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[2a0]"></a>st25r95SPIIsTransmitCompleted</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, st25r95_com_spi.o(i.st25r95SPIIsTransmitCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[2a3]"></a>st25r95SPIKillIdle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, st25r95_com_spi.o(i.st25r95SPIKillIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = st25r95SPIKillIdle &rArr; st25r95SPIGetIdleResponse &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPI_nIRQ_IN_Pulse
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIPollRead
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIGetIdleResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
</UL>

<P><STRONG><a name="[29b]"></a>st25r95SPIPollRead</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, st25r95_com_spi.o(i.st25r95SPIPollRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = st25r95SPIPollRead &rArr; timerIsExpired &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendCommandTypeAndLen
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIKillIdle
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPICommandEcho
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[2ea]"></a>st25r95SPIPollSend</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, st25r95_com_spi.o(i.st25r95SPIPollSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = st25r95SPIPollSend &rArr; st25r95SPISendReceiveByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPICommandEcho
</UL>

<P><STRONG><a name="[29e]"></a>st25r95SPIPrepareRx</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, st25r95_com_spi.o(i.st25r95SPIPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st25r95SPIPrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[2e9]"></a>st25r95SPIResetChip</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, st25r95.o(i.st25r95SPIResetChip))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = st25r95SPIResetChip &rArr; st25r95SPISendReceiveByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendReceiveByte
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPI_nIRQ_IN_Pulse
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95Initialize
</UL>

<P><STRONG><a name="[2ec]"></a>st25r95SPIRxTx</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, st25r95_com_spi.o(i.st25r95SPIRxTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendCommandTypeAndLen
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendData
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIIdle
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIGetIdleResponse
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPICompleteRx
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPICommandEcho
</UL>

<P><STRONG><a name="[2e6]"></a>st25r95SPISendCommandTypeAndLen</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, st25r95_com_spi.o(i.st25r95SPISendCommandTypeAndLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIRxTx
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendReceiveByte
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIPollRead
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95WriteReg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95ReadReg
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95ProtocolSelect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95CheckChipID
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95CalibrateTagDetector
</UL>

<P><STRONG><a name="[29f]"></a>st25r95SPISendData</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, st25r95_com_spi.o(i.st25r95SPISendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = st25r95SPISendData &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIRxTx
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[2eb]"></a>st25r95SPISendReceiveByte</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, st25r95_com_spi.o(i.st25r95SPISendReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = st25r95SPISendReceiveByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIPollSend
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendCommandTypeAndLen
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIResetChip
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendTransmitFlag
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendData
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIIdle
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIGetIdleResponse
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPICompleteRx
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPICommandEcho
</UL>

<P><STRONG><a name="[2a1]"></a>st25r95SPISendTransmitFlag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, st25r95_com_spi.o(i.st25r95SPISendTransmitFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = st25r95SPISendTransmitFlag &rArr; st25r95SPISendReceiveByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[2e8]"></a>st25r95SPI_nIRQ_IN_Pulse</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, st25r95.o(i.st25r95SPI_nIRQ_IN_Pulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = st25r95SPI_nIRQ_IN_Pulse &rArr; HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIResetChip
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIKillIdle
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95Initialize
</UL>

<P><STRONG><a name="[28f]"></a>st25r95SetBitRate</STRONG> (Thumb, 224 bytes, Stack size 12 bytes, st25r95_com.o(i.st25r95SetBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = st25r95SetBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[297]"></a>st25r95SetFWT</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, st25r95_com.o(i.st25r95SetFWT))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = st25r95SetFWT &rArr; st25r95ProtocolSelect &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>

<P><STRONG><a name="[229]"></a>st25r95SetSlotCounter</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, st25r95_com.o(i.st25r95SetSlotCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = st25r95SetSlotCounter &rArr; st25r95ProtocolSelect &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>

<P><STRONG><a name="[227]"></a>st25r95WriteReg</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, st25r95_com.o(i.st25r95WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = st25r95WriteReg &rArr; st25r95SPISendCommandTypeAndLen &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendCommandTypeAndLen
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
</UL>

<P><STRONG><a name="[223]"></a>timerCalculateTimer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(i.timerCalculateTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timerCalculateTimer &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIPollRead
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveRx
</UL>

<P><STRONG><a name="[20b]"></a>timerIsExpired</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer.o(i.timerIsExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timerIsExpired &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIPollRead
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveTx
</UL>

<P><STRONG><a name="[2b1]"></a>uart_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsartInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2ef]"></a>updata_fontx</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, fontupd.o(i.updata_fontx))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = updata_fontx &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_font
</UL>

<P><STRONG><a name="[bd]"></a>update_font</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, fontupd.o(i.update_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = update_font &rArr; updata_fontx &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updata_fontx
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Init
</UL>

<P><STRONG><a name="[191]"></a>usbd_CloseMassStorage</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usb_bsp.o(i.usbd_CloseMassStorage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_CloseMassStorage
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_DevDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Transfer_Task
</UL>

<P><STRONG><a name="[2f1]"></a>wav_buffill</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, wavplay.o(i.wav_buffill))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = wav_buffill &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
</UL>

<P><STRONG><a name="[2f2]"></a>wav_decode_init</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, wavplay.o(i.wav_decode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = wav_decode_init &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_play_song
</UL>

<P><STRONG><a name="[1b7]"></a>wav_play_song</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, wavplay.o(i.wav_play_song))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = wav_play_song &rArr; wav_decode_init &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_stop
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_start
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decode_init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_buffill
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_TX_DMA_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_SampleRate_Set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAIA_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_I2S_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
</UL>

<P><STRONG><a name="[96]"></a>wav_sai_dma_tx_callback</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wavplay.o(i.wav_sai_dma_tx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wav_sai_dma_tx_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wavplay.o(i.wav_play_song)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8e]"></a>NFC_Transfer_Task</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, task.o(i.NFC_Transfer_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = NFC_Transfer_Task &rArr; demoCycle &rArr; demoP2P &rArr; demoTransceiveBlocking &rArr; rfalNfcWorker &rArr; rfalNfcPollActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIni
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(i.Task_init)
</UL>
<P><STRONG><a name="[8d]"></a>OLED_Display_Task</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, task.o(i.OLED_Display_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = OLED_Display_Task &rArr; Show_String &rArr; Show_Font &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattChek
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(i.Task_init)
</UL>
<P><STRONG><a name="[8c]"></a>USB_Transfer_Task</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, task.o(i.USB_Transfer_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USB_Transfer_Task &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_CloseMassStorage
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(i.Task_init)
</UL>
<P><STRONG><a name="[8b]"></a>Wav_Player_Task</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, task.o(i.Wav_Player_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = Wav_Player_Task &rArr; audio_play &rArr; wav_play_song &rArr; wav_decode_init &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_play
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(i.Task_init)
</UL>
<P><STRONG><a name="[1bc]"></a>change_bitmap</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ff.o(i.change_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1be]"></a>check_fs</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1cb]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1c2]"></a>clmt_clust</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = clmt_clust &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[1e8]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1c3]"></a>cmp_lfn</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1c5]"></a>create_chain</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_bitmap
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1c9]"></a>create_name</STRONG> (Thumb, 554 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = create_name &rArr; ff_convert &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1cd]"></a>create_xdir</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ff.o(i.create_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = create_xdir &rArr; xname_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1e1]"></a>dir_alloc</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1e4]"></a>dir_find</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1e3]"></a>dir_next</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[1e5]"></a>dir_read</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1eb]"></a>dir_register</STRONG> (Thumb, 576 bytes, Stack size 160 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_qword
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_dir
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_fat_chain
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1ee]"></a>fill_fat_chain</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ff.o(i.fill_fat_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fill_fat_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1c7]"></a>find_bitmap</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(i.find_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = find_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1fa]"></a>find_volume</STRONG> (Thumb, 834 bytes, Stack size 56 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1fd]"></a>follow_path</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1ed]"></a>gen_numname</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1c6]"></a>get_fat</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[206]"></a>get_fileinfo</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_fileinfo &rArr; get_xdir_info &rArr; ff_convert &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xdir_info
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[1f9]"></a>get_ldnumber</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[209]"></a>get_xdir_info</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ff.o(i.get_xdir_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = get_xdir_info &rArr; ff_convert &rArr; W25QXX_Read &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[200]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1c0]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[203]"></a>ld_qword</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ff.o(i.ld_qword))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_qword
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xdir_info
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1bf]"></a>ld_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xdir_info
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1ef]"></a>load_obj_dir</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ff.o(i.load_obj_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = load_obj_dir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1e9]"></a>load_xdir</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ff.o(i.load_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = load_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdir_sum
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_dir
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[1c1]"></a>mem_cmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1ec]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1cc]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1bd]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_bitmap
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
</UL>

<P><STRONG><a name="[1ea]"></a>pick_lfn</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[1c8]"></a>put_fat</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_fat_chain
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[202]"></a>remove_chain</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = remove_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[201]"></a>st_clust</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1ff]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[1f0]"></a>st_qword</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ff.o(i.st_qword))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_qword
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1cf]"></a>st_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
</UL>

<P><STRONG><a name="[1f1]"></a>store_xdir</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.store_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = store_xdir &rArr; dir_next &rArr; create_chain &rArr; change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdir_sum
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1e6]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[207]"></a>sync_fs</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1e7]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sync_window &rArr; disk_write &rArr; SD_Init &rArr; HAL_SD_WideBusOperation_Config &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1f7]"></a>validate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[213]"></a>xdir_sum</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, ff.o(i.xdir_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xdir_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
</UL>

<P><STRONG><a name="[1ce]"></a>xname_sum</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.xname_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xname_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
</UL>

<P><STRONG><a name="[fb]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[ef]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[ed]"></a>DMA_MultiBufferSetConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_hal_dma_ex.o(i.DMA_MultiBufferSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_MultiBufferSetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMAEx_MultiBufferStart
</UL>

<P><STRONG><a name="[104]"></a>SAI_Disable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_sai.o(i.SAI_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAI_Disable &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_ErrorCallback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_DeInit
</UL>

<P><STRONG><a name="[111]"></a>SD_CmdResp1Error</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_StopTransfer
</UL>

<P><STRONG><a name="[156]"></a>SD_CmdResp2Error</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.SD_CmdResp2Error))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize_Cards
</UL>

<P><STRONG><a name="[152]"></a>SD_CmdResp6Error</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32f4xx_hal_sd.o(i.SD_CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize_Cards
</UL>

<P><STRONG><a name="[158]"></a>SD_CmdResp7Error</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.SD_CmdResp7Error))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[153]"></a>SD_FindSCR</STRONG> (Thumb, 266 bytes, Stack size 104 bytes, stm32f4xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[10e]"></a>SD_Initialize_Cards</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, stm32f4xx_hal_sd.o(i.SD_Initialize_Cards))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SD_Initialize_Cards &rArr; SD_CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp6Error
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp2Error
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[11b]"></a>SD_IsCardProgramming</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, stm32f4xx_hal_sd.o(i.SD_IsCardProgramming))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_IsCardProgramming &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[10d]"></a>SD_PowerON</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, stm32f4xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_PowerON &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp7Error
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[118]"></a>SD_WideBus_Disable</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, stm32f4xx_hal_sd.o(i.SD_WideBus_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_WideBus_Disable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
</UL>

<P><STRONG><a name="[117]"></a>SD_WideBus_Enable</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, stm32f4xx_hal_sd.o(i.SD_WideBus_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SD_CmdResp1Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CmdResp1Error
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WideBusOperation_Config
</UL>

<P><STRONG><a name="[11f]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[121]"></a>UART_Receive_IT</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>UART_SetConfig</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[122]"></a>UART_Transmit_IT</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[189]"></a>USB_OTG_CoreReset</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_CoreInit
</UL>

<P><STRONG><a name="[d5]"></a>DCD_HandleEnumDone_ISR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleEnumDone_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleEnumDone_ISR &rArr; USB_OTG_EP0Activate
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetDeviceSpeed
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[d8]"></a>DCD_HandleInEP_ISR</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleInEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllInEPItr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[dc]"></a>DCD_HandleOutEP_ISR</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleOutEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleOutEP_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevOutEP_itr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllOutEp_itr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[df]"></a>DCD_HandleRxStatusQueueLevel_ISR</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleRxStatusQueueLevel_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleRxStatusQueueLevel_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[17d]"></a>DCD_HandleUSBSuspend_ISR</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleUSBSuspend_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_HandleUSBSuspend_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[e1]"></a>DCD_HandleUsbReset_ISR</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleUsbReset_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[db]"></a>DCD_WriteEmptyTxFifo</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, usb_dcd_int.o(i.DCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[1]"></a>USBD_DataInStage</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>USBD_DataOutStage</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_DataOutStage &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_IsoINIncomplete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoINIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBD_IsoOUTIncomplete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoOUTIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBD_Reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_Reset &rArr; DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBD_Resume</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBD_SOF</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SOF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBD_SetupStage</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBD_Suspend</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[176]"></a>USBD_GetDescriptor</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[17e]"></a>USBD_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetCfg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[181]"></a>USBD_SetFeature</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, usbd_req.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[12e]"></a>MSC_BOT_Abort</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_msc_bot.o(i.MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MSC_BOT_Abort &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_CBW_Decode
</UL>

<P><STRONG><a name="[12f]"></a>MSC_BOT_CBW_Decode</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, usbd_msc_bot.o(i.MSC_BOT_CBW_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MSC_BOT_CBW_Decode &rArr; SCSI_ProcessCmd &rArr; SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_Abort
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_DataOut
</UL>

<P><STRONG><a name="[147]"></a>SCSI_CheckAddressRange</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, usbd_msc_scsi.o(i.SCSI_CheckAddressRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCSI_CheckAddressRange &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Verify10
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
</UL>

<P><STRONG><a name="[14e]"></a>SCSI_ProcessRead</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ProcessRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SCSI_ProcessRead &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Read10
</UL>

<P><STRONG><a name="[14f]"></a>SCSI_ProcessWrite</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_ProcessWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_BOT_SendCSW
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_Write10
</UL>

<P><STRONG><a name="[14b]"></a>SCSI_Read10</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_Read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SCSI_Read10 &rArr; SCSI_ProcessRead &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessRead
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[14a]"></a>SCSI_ReadCapacity10</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_ReadCapacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCSI_ReadCapacity10 &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[149]"></a>SCSI_ReadFormatCapacity</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usbd_msc_scsi.o(i.SCSI_ReadFormatCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCSI_ReadFormatCapacity &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[148]"></a>SCSI_RequestSense</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCSI_RequestSense
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[14d]"></a>SCSI_Verify10</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_msc_scsi.o(i.SCSI_Verify10))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCSI_Verify10 &rArr; SCSI_CheckAddressRange &rArr; SCSI_SenseCode
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[14c]"></a>SCSI_Write10</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, usbd_msc_scsi.o(i.SCSI_Write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCSI_Write10 &rArr; SCSI_ProcessWrite &rArr; MSC_BOT_SendCSW &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessWrite
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_CheckAddressRange
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_SenseCode
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCSI_ProcessCmd
</UL>

<P><STRONG><a name="[188]"></a>IntToUnicode</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, usbd_desc.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_USR_SerialStrDescriptor
</UL>

<P><STRONG><a name="[28d]"></a>rfalAnalogConfigSearch</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, rfal_analogconfig.o(i.rfalAnalogConfigSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rfalAnalogConfigSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[210]"></a>isoDepClearCounters</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rfal_isodep.o(i.isoDepClearCounters))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartTransceive
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
</UL>

<P><STRONG><a name="[20a]"></a>isoDepDataExchangePCD</STRONG> (Thumb, 650 bytes, Stack size 32 bytes, rfal_isodep.o(i.isoDepDataExchangePCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepClearCounters
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>

<P><STRONG><a name="[20e]"></a>isoDepHandleControlMsg</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, rfal_isodep.o(i.isoDepHandleControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>

<P><STRONG><a name="[20c]"></a>isoDepTx</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, rfal_isodep.o(i.isoDepTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>

<P><STRONG><a name="[23e]"></a>rfalIsoDepApdu2IBLockParam</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rfal_isodep.o(i.rfalIsoDepApdu2IBLockParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalIsoDepApdu2IBLockParam
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetMaxInfLen
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[249]"></a>rfalIsoDepCalcBitRate</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, rfal_isodep.o(i.rfalIsoDepCalcBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rfalIsoDepCalcBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[24b]"></a>rfalIsoDepSFGI2SFGT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rfal_isodep.o(i.rfalIsoDepSFGI2SFGT))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[254]"></a>rfalNfcDeactivation</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rfal_nfc.o(i.rfalNfcDeactivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rfalNfcDeactivation &rArr; rfalIsoDepDeselect &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepRLS
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepDSL
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDeactivate
</UL>

<P><STRONG><a name="[262]"></a>rfalNfcNfcDepActivate</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, rfal_nfc.o(i.rfalNfcNfcDepActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollTechDetetection
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcPollActivation
</UL>

<P><STRONG><a name="[263]"></a>rfalNfcPollActivation</STRONG> (Thumb, 390 bytes, Stack size 80 bytes, rfal_nfc.o(i.rfalNfcPollActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = rfalNfcPollActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSelect
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerCheckPresence
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[26b]"></a>rfalNfcPollCollResolution</STRONG> (Thumb, 736 bytes, Stack size 136 bytes, rfal_nfc.o(i.rfalNfcPollCollResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rfalNfcPollCollResolution &rArr; rfalNfcvPollerCollisionResolution &rArr; rfalNfcvPollerInventory &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolution
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[271]"></a>rfalNfcPollTechDetetection</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, rfal_nfc.o(i.rfalNfcPollTechDetetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = rfalNfcPollTechDetetection &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCheckPresence
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCheckPresence
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheckPresence
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerTechnologyDetection
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcNfcDepActivate
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcWorker
</UL>

<P><STRONG><a name="[280]"></a>rfalNfcaCalculateBcc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rfal_nfca.o(i.rfalNfcaCalculateBcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rfalNfcaCalculateBcc
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSelect
</UL>

<P><STRONG><a name="[281]"></a>rfalNfcbCheckSensbRes</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rfal_nfcb.o(i.rfalNfcbCheckSensbRes))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlottedCollisionResolution
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerSlotMarker
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCheckPresence
</UL>

<P><STRONG><a name="[21f]"></a>nfcipClearCounters</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rfal_nfcdep.o(i.nfcipClearCounters))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipSetDEPParams
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
</UL>

<P><STRONG><a name="[218]"></a>nfcipConfig</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, rfal_nfcdep.o(i.nfcipConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nfcipConfig &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
</UL>

<P><STRONG><a name="[21a]"></a>nfcipDEPControlMsg</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.nfcipDEPControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
</UL>

<P><STRONG><a name="[21c]"></a>nfcipDataRx</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rfal_nfcdep.o(i.nfcipDataRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = nfcipDataRx &rArr; rfalTransceiveBlockingRx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingRx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>

<P><STRONG><a name="[21e]"></a>nfcipInitiatorHandleDEP</STRONG> (Thumb, 612 bytes, Stack size 56 bytes, rfal_nfcdep.o(i.nfcipInitiatorHandleDEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nfcipInitiatorHandleDEP &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>

<P><STRONG><a name="[220]"></a>nfcipRun</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, rfal_nfcdep.o(i.nfcipRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = nfcipRun &rArr; nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipInitiatorHandleDEP
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
</UL>

<P><STRONG><a name="[222]"></a>nfcipSetDEPParams</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, rfal_nfcdep.o(i.nfcipSetDEPParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nfcipSetDEPParams
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartTransceive
</UL>

<P><STRONG><a name="[221]"></a>nfcipTargetHandleRX</STRONG> (Thumb, 854 bytes, Stack size 72 bytes, rfal_nfcdep.o(i.nfcipTargetHandleRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = nfcipTargetHandleRX &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipClearCounters
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
</UL>

<P><STRONG><a name="[21b]"></a>nfcipTx</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, rfal_nfcdep.o(i.nfcipTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTxRx
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTargetHandleRX
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipRun
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
</UL>

<P><STRONG><a name="[224]"></a>nfcipTxRx</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, rfal_nfcdep.o(i.nfcipTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDataRx
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepRLS
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepDSL
</UL>

<P><STRONG><a name="[25a]"></a>rfalNfcDepPdu2BLockParam</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, rfal_nfcdep.o(i.rfalNfcDepPdu2BLockParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rfalNfcDepPdu2BLockParam
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartPduTransceive
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetPduTransceiveStatus
</UL>

<P><STRONG><a name="[285]"></a>rfalNfcfComputeValidSENF</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, rfal_nfcf.o(i.rfalNfcfComputeValidSENF))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rfalNfcfComputeValidSENF &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
</UL>

<P><STRONG><a name="[28b]"></a>rfalNfcvParseError</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rfal_nfcv.o(i.rfalNfcvParseError))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerTransceiveReq
</UL>

<P><STRONG><a name="[22b]"></a>rfalChipIsBusy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfal_rfst25r95.o(i.rfalChipIsBusy))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[232]"></a>rfalTransceiveRunBlockingTx</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rfal_rfst25r95.o(i.rfalTransceiveRunBlockingTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInTx
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsTransceiveInRx
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>

<P><STRONG><a name="[29a]"></a>rfalTransceiveRx</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, rfal_rfst25r95.o(i.rfalTransceiveRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIPollRead
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPICompleteRx
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[29d]"></a>rfalTransceiveTx</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, rfal_rfst25r95.o(i.rfalTransceiveTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rfalTransceiveTx &rArr; st25r95SPISendData &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendTransmitFlag
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPISendData
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIPrepareRx
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r95SPIIsTransmitCompleted
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsGTExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[294]"></a>rfalSt25tbPollerDoCollisionResolution</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, rfal_st25tb.o(i.rfalSt25tbPollerDoCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rfalSt25tbPollerDoCollisionResolution &rArr; rfalSt25tbPollerSelect &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSlotMarker
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerSelect
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerPcall
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerGetUID
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
</UL>

<P><STRONG><a name="[1d0]"></a>demoAPDU</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, demo.o(i.demoAPDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = demoAPDU &rArr; demoTransceiveBlocking &rArr; rfalNfcWorker &rArr; rfalNfcPollActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTransceiveBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[1d8]"></a>demoNfcf</STRONG> (Thumb, 86 bytes, Stack size 104 bytes, demo.o(i.demoNfcf))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = demoNfcf &rArr; rfalNfcfPollerCheck &rArr; rfalTransceiveBlockingTxRx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheck
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[93]"></a>demoNotif</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, demo.o(i.demoNotif))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = demoNotif &rArr; logUsart &rArr; logUsartTx &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcSelect
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcGetDevicesFound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo.o(i.demoIni)
</UL>
<P><STRONG><a name="[1d9]"></a>demoP2P</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, demo.o(i.demoP2P))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = demoP2P &rArr; demoTransceiveBlocking &rArr; rfalNfcWorker &rArr; rfalNfcPollActivation &rArr; rfalNfcNfcDepActivate &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; nfcipTxRx &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalTransceiveRunBlockingTx &rArr; rfalWorker &rArr; rfalTransceiveRx &rArr; st25r95SPICompleteRx &rArr; st25r95SPIRxTx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logUsart
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTransceiveBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[99]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[98]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[9a]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[97]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[2d6]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(i._has_defunct_thread))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[95]"></a>rt_thread_idle_entry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = rt_thread_idle_entry &rArr;  rt_thread_idle_entry (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[2b8]"></a>rt_ipc_list_resume</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[2b9]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[2ba]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[2e2]"></a>print_number</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[2e0]"></a>skip_atoi</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skip_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[2ac]"></a>plug_holes</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[2c2]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[2c4]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[1af]"></a>_rt_thread_init</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[2d3]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[2d9]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[2de]"></a>_rt_timer_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer_1.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[2dd]"></a>_rt_timer_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer_1.o(i._rt_timer_remove))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[2df]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer_1.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[1aa]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a8]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1ad]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ac]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[90]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
